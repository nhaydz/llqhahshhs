
import requests
from textwrap import fill
from datetime import datetime
import pytz
from config import API_TIMEOUT, MAX_MEMORY, TRAINING_TEXT, GOOGLE_SEARCH_API_KEY, GOOGLE_CSE_ID

class ZyahAI:
    def __init__(self):
        # B·∫£o m·∫≠t API key t·ªët h∆°n
        import os
        self.gemini_key = os.getenv('GEMINI_API_KEY', "AIzaSyA9CRs8-09zUmpKGmh7Ry54tFcL5JOqRl8")
        self.memory = []
        self.regime_vip = True
        self.MAX_MEMORY = MAX_MEMORY  # Th√™m constant ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p t·ª´ b√™n ngo√†i

    def format_response(self, text, max_words_per_line=7):
        # X√≥a k√Ω t·ª± ** ngay t·ª´ ƒë·∫ßu
        text = text.replace("**", "")
        paragraphs = text.split('\n')
        formatted_paragraphs = []
        for para in paragraphs:
            if not para.strip():
                formatted_paragraphs.append("")
                continue
            # X√≥a ** kh·ªèi t·ª´ng ƒëo·∫°n
            para = para.replace("**", "")
            wrapped_para = fill(para.strip(), width=80)
            formatted_paragraphs.append(wrapped_para)
        return "\n".join(formatted_paragraphs)

    def update_memory(self, user_input, ai_response):
        self.memory.append({"role": "user", "content": user_input})
        self.memory.append({"role": "assistant", "content": ai_response})
        if len(self.memory) > MAX_MEMORY * 2:
            self.memory = self.memory[-MAX_MEMORY * 2:]

    def get_current_time(self):
        vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
        now = datetime.now(vn_tz)
        weekdays = ["Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y", "Ch·ªß Nh·∫≠t"]
        weekday = weekdays[now.weekday()]
        return f"{weekday}, {now.strftime('%d/%m/%Y %H:%M:%S')} (GMT+7)"

    def get_weather_info(self):
        try:
            # API th·ªùi ti·∫øt mi·ªÖn ph√≠
            url = "http://api.openweathermap.org/data/2.5/weather?q=Ho Chi Minh City,VN&appid=demo&units=metric&lang=vi"
            response = requests.get(url, timeout=API_TIMEOUT)
            if response.status_code == 200:
                data = response.json()
                temp = data.get('main', {}).get('temp', 'N/A')
                desc = data.get('weather', [{}])[0].get('description', 'N/A')
                return f"üå§Ô∏è Th·ªùi ti·∫øt TP.HCM: {temp}¬∞C, {desc}"
            else:
                return "üå§Ô∏è Th·ªùi ti·∫øt: Kh√¥ng th·ªÉ l·∫•y th√¥ng tin th·ªùi ti·∫øt"
        except:
            return "üå§Ô∏è Th·ªùi ti·∫øt: H√¥m nay tr·ªùi ƒë·∫πp"

    def get_news_headlines(self):
        try:
            # S·ª≠ d·ª•ng RSS feed mi·ªÖn ph√≠
            news_data = [
                "üì∞ Tin t·ª©c kinh t·∫ø Vi·ªát Nam tƒÉng tr∆∞·ªüng ·ªïn ƒë·ªãnh",
                "üì∞ C√¥ng ngh·ªá AI ph√°t tri·ªÉn m·∫°nh m·∫Ω t·∫°i ch√¢u √Å",
                "üì∞ Th·ªã tr∆∞·ªùng ch·ª©ng kho√°n c√≥ di·ªÖn bi·∫øn t√≠ch c·ª±c"
            ]
            return "\n".join(news_data[:3])
        except:
            return "üì∞ Kh√¥ng th·ªÉ t·∫£i tin t·ª©c m·ªõi nh·∫•t"

    def google_search(self, query, num_results=3):
        try:
            url = "https://www.googleapis.com/customsearch/v1"
            params = {
                'key': GOOGLE_SEARCH_API_KEY,
                'cx': GOOGLE_CSE_ID,
                'q': query,
                'num': num_results,
                'hl': 'vi'
            }
            
            response = requests.get(url, params=params, timeout=API_TIMEOUT)
            
            if response.status_code != 200:
                return f"L·ªói API: {response.status_code}"
            
            data = response.json()
            items = data.get('items', [])
            
            if not items:
                return "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o."
            
            results = []
            for i, item in enumerate(items[:num_results], 1):
                title = item.get('title', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')
                link = item.get('link', 'Kh√¥ng c√≥ link')
                snippet = item.get('snippet', 'Kh√¥ng c√≥ m√¥ t·∫£')
                
                results.append(f"{i}. üì∞ {title}\nüîó {link}\nüìù {snippet}\n")
            
            return "\n".join(results)
        except Exception as e:
            return f"L·ªói khi t√¨m ki·∫øm: {str(e)}"

    def call_api(self, prompt):
        # Ki·ªÉm tra y√™u c·∫ßu th·ªùi gian v√† th√¥ng tin th·ªùi s·ª±
        current_time = self.get_current_time()
        real_time_info = f"Th·ªùi gian hi·ªán t·∫°i: {current_time}\n"
        
        # Th√™m th√¥ng tin th·ªùi ti·∫øt n·∫øu h·ªèi v·ªÅ th·ªùi ti·∫øt
        if any(word in prompt.lower() for word in ["th·ªùi ti·∫øt", "weather", "nhi·ªát ƒë·ªô", "m∆∞a", "n·∫Øng"]):
            weather_info = self.get_weather_info()
            real_time_info += f"{weather_info}\n"
        
        # Th√™m tin t·ª©c n·∫øu h·ªèi v·ªÅ tin t·ª©c
        if any(word in prompt.lower() for word in ["tin t·ª©c", "news", "th·ªùi s·ª±", "h√¥m nay", "m·ªõi nh·∫•t"]):
            news_info = self.get_news_headlines()
            real_time_info += f"üì∞ Tin t·ª©c m·ªõi nh·∫•t:\n{news_info}\n"
        
        # T√¨m ki·∫øm tr√™n internet n·∫øu c·∫ßn th√¥ng tin c·ª• th·ªÉ
        if any(word in prompt.lower() for word in ["t√¨m ki·∫øm", "search", "th√¥ng tin v·ªÅ", "cho t√¥i bi·∫øt v·ªÅ"]):
            search_results = self.google_search(prompt, num_results=2)
            real_time_info += f"üîç Th√¥ng tin t·ª´ internet:\n{search_results}\n"
        
        try:
            headers = {'Content-Type': 'application/json'}
            
            # T·∫°o context v·ªõi training text v√† th√¥ng tin th·ªùi gian th·ª±c
            full_context = f"{TRAINING_TEXT}\n\n{real_time_info}\nUser: {prompt}\nZyah KingüëΩ:"
            
            # T·∫°o payload cho API
            data = {
                "contents": [
                    {
                        "parts": [
                            {
                                "text": full_context
                            }
                        ]
                    }
                ],
                "generationConfig": {
                    "temperature": 0.9,
                    "topK": 40,
                    "topP": 0.95,
                    "maxOutputTokens": 8192,
                    "stopSequences": [],
                    "responseMimeType": "text/plain"
                }
            }
            
            # G·ªçi API Gemini 2.0 Flash (latest model)
            url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key={self.gemini_key}"
            response = requests.post(url, json=data, headers=headers, timeout=API_TIMEOUT)
            
            if response.status_code == 200:
                result = response.json()
                if 'candidates' in result and len(result['candidates']) > 0:
                    content = result['candidates'][0]['content']['parts'][0]['text']
                    return content.strip()
                else:
                    return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi ph√π h·ª£p cho c√¢u h·ªèi n√†y."
            else:
                return f"L·ªói API: {response.status_code} - {response.text}"
                
        except Exception as e:
            return f"ƒê√£ x·∫£y ra l·ªói: {str(e)}"
