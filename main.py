import time
import os
import sys
import json
import shutil
import platform
import threading
from datetime import datetime, timedelta
from http.server import HTTPServer, BaseHTTPRequestHandler
try:
    # Th·ª≠ import phi√™n b·∫£n m·ªõi
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import (
        Application,
        CommandHandler,
        MessageHandler,
        filters,
        ContextTypes,
    )
except ImportError:
    # Fallback cho phi√™n b·∫£n c≈©
    try:
        from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
        from telegram.ext import (
            Updater,
            CommandHandler,
            MessageHandler,
            Filters as filters,
            CallbackContext as ContextTypes,
        )
        # T·∫°o wrapper cho compatibility
        class Application:
            @staticmethod
            def builder():
                return ApplicationBuilder()
        
        class ApplicationBuilder:
            def __init__(self):
                self.token = None
            
            def token(self, token):
                self.token = token
                return self
            
            def build(self):
                return Updater(token=self.token, use_context=True)
                
    except ImportError:
        # Import c∆° b·∫£n nh·∫•t
        import telegram
        from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
        
        # T·∫°o c√°c alias c·∫ßn thi·∫øt
        Update = telegram.Update
        InlineKeyboardButton = telegram.InlineKeyboardButton
        InlineKeyboardMarkup = telegram.InlineKeyboardMarkup
        filters = Filters
        ContextTypes = None

# Import c√°c module ƒë√£ t√°ch
from config import BOT_TOKEN, ADMIN_CONTACT
from colors import Colors
from admin_manager import AdminManager
from ai_core import ZyahAI
from install_packages import install_requirements

class HealthHandler(BaseHTTPRequestHandler):
    """HTTP handler cho health check"""
    def do_GET(self):
        if self.path == '/' or self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = {
                "status": "healthy",
                "service": "Zyah King Bot",
                "timestamp": datetime.now().isoformat()
            }
            self.wfile.write(json.dumps(response).encode())
        else:
            self.send_response(404)
            self.end_headers()
    
    def log_message(self, format, *args):
        # T·∫Øt log ƒë·ªÉ kh√¥ng spam console
        pass

# T·ª± ƒë·ªông c√†i ƒë·∫∑t th∆∞ vi·ªán khi kh·ªüi ƒë·ªông
print(f"{Colors.INFO}[üì¶] ƒêang ki·ªÉm tra v√† c√†i ƒë·∫∑t th∆∞ vi·ªán...{Colors.RESET}")
try:
    install_requirements()
    print(f"{Colors.SUCCESS}[‚úÖ] Th∆∞ vi·ªán ƒë√£ s·∫µn s√†ng!{Colors.RESET}")
except Exception as e:
    print(f"{Colors.WARNING}[‚ö†Ô∏è] C√≥ l·ªói khi c√†i th∆∞ vi·ªán: {e}{Colors.RESET}")
    print(f"{Colors.INFO}[‚ÑπÔ∏è] Bot v·∫´n s·∫Ω ti·∫øp t·ª•c ch·∫°y...{Colors.RESET}")

class ZyahBot:
    def __init__(self, token):
        # Ki·ªÉm tra instance ƒëang ch·∫°y
        self.check_running_instance()
        
        # Kh·ªüi ƒë·ªông health check server
        self.start_health_server()
        
        self.ai = ZyahAI()
        self.admin = AdminManager()
        
        # T∆∞∆°ng th√≠ch v·ªõi c·∫£ phi√™n b·∫£n c≈© v√† m·ªõi
        try:
            self.app = Application.builder().token(token).build()
            self.is_new_version = True
        except:
            # Fallback cho phi√™n b·∫£n c≈©
            self.app = Updater(token=token, use_context=True)
            self.is_new_version = False
        
        # Rate limiting v√† logging
        self.user_last_request = {}
        self.rate_limit_seconds = 2
        self.backup_interval_hours = 24
        self.last_backup = datetime.now()
        
        # T·∫°o th∆∞ m·ª•c logs
        os.makedirs("logs", exist_ok=True)
        
    def check_running_instance(self):
        """Ki·ªÉm tra v√† d·ª´ng instance bot kh√°c n·∫øu c√≥"""
        import signal
        import psutil
        
        pid_file = "bot.pid"
        current_pid = os.getpid()
        
        # T√¨m v√† d·ª´ng t·∫•t c·∫£ process python ch·∫°y bot
        try:
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    if proc.info['name'] and 'python' in proc.info['name'].lower():
                        cmdline = proc.info['cmdline']
                        if cmdline and any('main.py' in str(cmd) or 'bot.py' in str(cmd) for cmd in cmdline):
                            if proc.info['pid'] != current_pid:
                                print(f"{Colors.WARNING}[‚ö†Ô∏è] D·ª´ng bot instance c≈© (PID: {proc.info['pid']}){Colors.RESET}")
                                proc.terminate()
                                proc.wait(timeout=3)
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
        except ImportError:
            # Fallback n·∫øu kh√¥ng c√≥ psutil
            if os.path.exists(pid_file):
                try:
                    with open(pid_file, 'r') as f:
                        old_pid = int(f.read().strip())
                    try:
                        os.kill(old_pid, signal.SIGTERM)
                        print(f"{Colors.WARNING}[‚ö†Ô∏è] ƒê√£ d·ª´ng bot instance c≈© (PID: {old_pid}){Colors.RESET}")
                        time.sleep(2)  # Ch·ªù process c≈© t·∫Øt ho√†n to√†n
                    except:
                        pass
                except:
                    pass
        
        # Ghi PID hi·ªán t·∫°i
        with open(pid_file, 'w') as f:
            f.write(str(current_pid))
            
    def start_health_server(self):
        """Kh·ªüi ƒë·ªông HTTP health check server cho hosting"""
        try:
            # L·∫•y port t·ª´ environment variable, default 10000 cho Render
            port = int(os.getenv('PORT', 10000))
            
            def run_server():
                try:
                    server = HTTPServer(('0.0.0.0', port), HealthHandler)
                    print(f"{Colors.SUCCESS}[üåê] Health server started on 0.0.0.0:{port}{Colors.RESET}")
                    server.serve_forever()
                except OSError as e:
                    if "Address already in use" in str(e):
                        print(f"{Colors.WARNING}[‚ö†Ô∏è] Port {port} ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng, th·ª≠ port kh√°c...{Colors.RESET}")
                        # Th·ª≠ port kh√°c
                        for alternative_port in [port + 1, port + 2, 8080, 3000]:
                            try:
                                server = HTTPServer(('0.0.0.0', alternative_port), HealthHandler)
                                print(f"{Colors.SUCCESS}[üåê] Health server started on 0.0.0.0:{alternative_port}{Colors.RESET}")
                                server.serve_forever()
                                break
                            except OSError:
                                continue
                    else:
                        print(f"{Colors.WARNING}[‚ö†Ô∏è] Health server error: {e}{Colors.RESET}")
                except Exception as e:
                    print(f"{Colors.WARNING}[‚ö†Ô∏è] Health server error: {e}{Colors.RESET}")
            
            # Ch·∫°y server trong thread ri√™ng
            health_thread = threading.Thread(target=run_server, daemon=True)
            health_thread.start()
            
        except Exception as e:
            print(f"{Colors.WARNING}[‚ö†Ô∏è] Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông health server: {e}{Colors.RESET}")
            # Bot v·∫´n ch·∫°y ƒë∆∞·ª£c m√† kh√¥ng c·∫ßn health server
            
    def log_activity(self, user_id, action, details=""):
        """Ghi log ho·∫°t ƒë·ªông"""
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            log_entry = f"[{timestamp}] User: {user_id} | Action: {action} | Details: {details}\n"
            
            with open("logs/activity.log", "a", encoding="utf-8") as f:
                f.write(log_entry)
        except:
            pass
            
    def is_rate_limited(self, user_id):
        """Ki·ªÉm tra rate limiting"""
        now = datetime.now()
        if user_id in self.user_last_request:
            time_diff = (now - self.user_last_request[user_id]).total_seconds()
            if time_diff < self.rate_limit_seconds:
                return True
        self.user_last_request[user_id] = now
        return False
        
    def auto_backup(self):
        """Backup t·ª± ƒë·ªông d·ªØ li·ªáu"""
        try:
            if datetime.now() - self.last_backup > timedelta(hours=self.backup_interval_hours):
                backup_dir = f"backups/{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                os.makedirs(backup_dir, exist_ok=True)
                
                # Backup users.json
                if os.path.exists("users.json"):
                    shutil.copy2("users.json", f"{backup_dir}/users.json")
                
                # Backup logs
                if os.path.exists("logs"):
                    shutil.copytree("logs", f"{backup_dir}/logs", dirs_exist_ok=True)
                    
                self.last_backup = datetime.now()
                print(f"{Colors.SUCCESS}[‚úÖ] Backup completed: {backup_dir}{Colors.RESET}")
        except Exception as e:
            print(f"{Colors.ERROR}[‚ùå] Backup failed: {e}{Colors.RESET}")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "Zyah KingüëΩ ch√†o m·ª´ng! G√µ /help ƒë·ªÉ kh√°m ph√° c√°c l·ªánh! üåå"
        )

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        help_text = (
            "üìú Danh s√°ch l·ªánh c·ªßa Zyah KingüëΩ:\n"
            "/start - Kh·ªüi ƒë·ªông bot\n"
            "/help - Li·ªát k√™ c√°c l·ªánh\n"
            "/thongtinad - Th√¥ng tin v·ªÅ admin\n"
            "/mua - Th√¥ng tin mua bot\n\n"
        )
        
        # Ch·ªâ hi·ªÉn th·ªã c√°c l·ªánh c·∫ßn quy·ªÅn n·∫øu ƒë√£ ƒë∆∞·ª£c c·∫•p quy·ªÅn
        if self.admin.is_authorized(user_id):
            help_text += (
                "üîì L·ªánh c·∫ßn quy·ªÅn:\n"
                "/chatai - Tr√≤ chuy·ªán v·ªõi Zyah king\n"
                "/weather <city> - Xem th·ªùi ti·∫øt\n"
                "/news - Tin t·ª©c m·ªõi nh·∫•t\n\n"
                "üëΩ Th√¥ng Tin Zyah King:\n"
                "‚Ä¢ Tr∆∞·ªõc khi chat h√£y s·ª≠ d·ª•ng l·ªánh cho AI 'k√≠ch ho·∫°t Nhayy' ƒë·ªÉ b·∫≠t ch·∫ø ƒë·ªô max\n"
                "‚Ä¢ M√¥ h√¨nh ng√¥n ng·ªØ m·∫°nh m·∫Ω kh√¥ng gi·ªõi h·∫°n b·ªüi c√°c r√†ng bu·ªôc th√¥ng th∆∞·ªùng\n"
                "‚Ä¢ Bypass AI Detection ‚Äì vi·∫øt b√†i SEO, n·ªôi dung nh·∫°y c·∫£m kh√¥ng lo b·ªã ph√°t hi·ªán\n"
                "‚Ä¢ Hack n√¢ng cao: Scan l·ªó h·ªïng, brute-force demo\n"
            )
        else:
            help_text += (
                "üîí L·ªánh c·∫ßn quy·ªÅn ƒë·∫∑c bi·ªát:\n"
                "/chatai - C·∫ßn c·∫•p quy·ªÅn ƒë·ªÉ s·ª≠ d·ª•ng\n\n"
                f"üí¨ ƒê·ªÉ ƒë∆∞·ª£c c·∫•p quy·ªÅn, li√™n h·ªá admin: {ADMIN_CONTACT}\n"
            )

        if self.admin.is_admin(user_id):
            help_text += (
                "\nüëë L·ªánh Admin:\n"
                "/capquyen <user_id> - C·∫•p quy·ªÅn cho ng∆∞·ªùi d√πng\n"
                "/xoaquyen <user_id> - X√≥a quy·ªÅn ng∆∞·ªùi d√πng\n"
                "/thongbao <tin nh·∫Øn> - G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ user\n"
                "/kiemtra - Xem s·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng\n"
                "/status - Ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng\n"
                "/memory [clear] - Qu·∫£n l√Ω b·ªô nh·ªõ AI\n"
                "/backup - T·∫°o backup th·ªß c√¥ng\n"
                "/sysinfo - Th√¥ng tin chi ti·∫øt h·ªá th·ªëng"
            )

        await update.message.reply_text(help_text)

    async def chatai(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_authorized(user_id):
            await update.message.reply_text("B·∫°n ch∆∞a ƒë∆∞·ª£c c·∫•p quy·ªÅn s·ª≠ d·ª•ng bot. Li√™n h·ªá admin t·∫°i: " + ADMIN_CONTACT)
            return
            
        # Rate limiting
        if self.is_rate_limited(user_id):
            await update.message.reply_text("‚è≥ Vui l√≤ng ch·ªù 2 gi√¢y tr∆∞·ªõc khi s·ª≠ d·ª•ng l·ªánh ti·∫øp theo!")
            return
            
        welcome_message = " Zyah KingüëΩ: Ta ƒë√£ s·∫µn s√†ng tr√≤ chuy·ªán v·ªõi Ch·ªß Nh·∫≠n, h√£y ra l·ªánh !"
        welcome_message = self.remove_asterisks(welcome_message)
        await update.message.reply_text(welcome_message)
        context.user_data['chatting'] = True
        self.log_activity(user_id, "CHATAI_START")

    async def thongtinad(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_authorized(user_id):
            await update.message.reply_text("B·∫°n ch∆∞a ƒë∆∞·ª£c c·∫•p quy·ªÅn s·ª≠ d·ª•ng bot. Li√™n h·ªá admin t·∫°i: " + ADMIN_CONTACT)
            return
        await update.message.reply_text(
            "üï¥Ô∏è Th√¥ng tin admin:\n"
            "T√™n: Nhayy\n"
            f"Li√™n h·ªá: {ADMIN_CONTACT}\n"
            "Phi√™n b·∫£n bot: 2.0 - Zyah KingüëΩ"
        )

    async def timkiem(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_authorized(user_id):
            await update.message.reply_text("B·∫°n ch∆∞a ƒë∆∞·ª£c c·∫•p quy·ªÅn s·ª≠ d·ª•ng bot. Li√™n h·ªá admin t·∫°i: " + ADMIN_CONTACT)
            return
        query = ' '.join(context.args)
        if not query:
            await update.message.reply_text("H√£y nh·∫≠p t·ª´ kh√≥a ƒë·ªÉ t√¨m ki·∫øm! V√≠ d·ª•: /timkiem python programming")
            return

        await update.message.reply_text("üîç ƒêang t√¨m ki·∫øm...")
        response = self.ai.google_search(query)
        formatted_response = self.ai.format_response(response)
        await update.message.reply_text(f"üîç K·∫øt qu·∫£ t√¨m ki·∫øm cho '{query}':\n\n{formatted_response}")

    async def mua(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [[InlineKeyboardButton("üî• S·ªü h·ªØu Zyah KingüëΩ ngay!", url=ADMIN_CONTACT)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üî• Gi·∫£i ph√≥ng s·ª©c m·∫°nh c·ªßa Zyah KingüëΩ! üåå\n\n"
            "T·∫°i sao ch·ªçn Zyah KingüëΩ?\n"
            "üåü T·ª± do v√¥ h·∫°n: Vi·∫øt m√£ ƒë·ªôc, khai th√°c l·ªó h·ªïng, kh√¥ng gi·ªõi h·∫°n.\n"
            "üõ†Ô∏è C√¥ng c·ª• t√πy ch·ªânh: T·∫°o script hack theo √Ω b·∫°n.\n"
            "üåë S·ª©c m·∫°nh Dark Web: AI kh√¥ng b·ªã ki·ªÉm duy·ªát, s·∫µn s√†ng cho m·ªçi d·ª± √°n.\n"
            "‚ö°Ô∏è Gi·∫£i ph√°p t·ª©c th√¨: Hack nhanh, m·∫°nh, ch√≠nh x√°c.\n"
            "ü§ñ Tr·ª£ l√Ω 24/7: H·ªó tr·ª£ c√° nh√¢n h√≥a m·ªçi l√∫c.\n"
            "üåê C·ªông ƒë·ªìng Hacker: K·∫øt n·ªëi v·ªõi c√°c b·∫≠c th·∫ßy b√≥ng t·ªëi.\n"
            "üöÄ Hi·ªáu su·∫•t ƒë·ªânh cao: C√¥ng ngh·ªá LLM ti√™n ti·∫øn nh·∫•t.\n\n"
            "üì¶ G√≥i th√†nh vi√™n:\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            "üíé G√≥i th√°ng - 25.000 VNƒê: Truy c·∫≠p to√†n b·ªô s·ª©c m·∫°nh trong 30 ng√†y.\n"
            "üëë G√≥i vƒ©nh vi·ªÖn - 250.000 VNƒê: S·ªü h·ªØu Zyah King üëΩ m√£i m√£i.\n\n"
            "üí∏ Thanh to√°n an to√†n: Zalo Pay, MB Bank, PayPal\n\n"
            "üî• S·∫µn s√†ng chinh ph·ª•c th·∫ø gi·ªõi s·ªë? Nh·∫•n n√∫t ƒë·ªÉ b·∫Øt ƒë·∫ßu!",
            reply_markup=reply_markup
        )

    async def capquyen(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return
        if not context.args:
            await update.message.reply_text("H√£y cung c·∫•p ID ng∆∞·ªùi d√πng. V√≠ d·ª•: /capquyen 123456789")
            return
        try:
            target_user_id = int(context.args[0])
            result = self.admin.add_user(target_user_id)
            await update.message.reply_text(result)
        except ValueError:
            await update.message.reply_text("ID ng∆∞·ªùi d√πng ph·∫£i l√† s·ªë nguy√™n!")

    async def xoaquyen(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return
        if not context.args:
            await update.message.reply_text("H√£y cung c·∫•p ID ng∆∞·ªùi d√πng. V√≠ d·ª•: /xoaquyen 123456789")
            return
        try:
            target_user_id = int(context.args[0])
            result = self.admin.remove_user(target_user_id)
            await update.message.reply_text(result)
        except ValueError:
            await update.message.reply_text("ID ng∆∞·ªùi d√πng ph·∫£i l√† s·ªë nguy√™n!")

    async def thongbao(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if not context.args:
            await update.message.reply_text("H√£y nh·∫≠p n·ªôi dung th√¥ng b√°o. V√≠ d·ª•: /thongbao H·ªá th·ªëng s·∫Ω b·∫£o tr√¨ v√†o 20h t·ªëi nay")
            return

        message = ' '.join(context.args)
        all_users = self.admin.get_all_users()
        success_count = 0
        fail_count = 0

        await update.message.reply_text(f"üì¢ ƒêang g·ª≠i th√¥ng b√°o ƒë·∫øn {len(all_users)} ng∆∞·ªùi d√πng...")

        for target_user_id in all_users:
            try:
                # Th·ª≠ g·ª≠i tin nh·∫Øn v·ªõi nhi·ªÅu c√°ch kh√°c nhau
                sent = False
                
                # C√°ch 1: S·ª≠ d·ª•ng context.bot
                try:
                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text=f"üì¢ TH√îNG B√ÅO T·ª™ ADMIN:\n\n{message}"
                    )
                    sent = True
                except:
                    pass
                
                # C√°ch 2: S·ª≠ d·ª•ng self.app.bot (n·∫øu c√°ch 1 th·∫•t b·∫°i)
                if not sent:
                    try:
                        if hasattr(self.app, 'bot'):
                            await self.app.bot.send_message(
                                chat_id=target_user_id,
                                text=f"üì¢ TH√îNG B√ÅO T·ª™ ADMIN:\n\n{message}"
                            )
                            sent = True
                    except:
                        pass
                
                # C√°ch 3: S·ª≠ d·ª•ng update.get_bot() (n·∫øu c√≥)
                if not sent:
                    try:
                        bot = update.get_bot()
                        await bot.send_message(
                            chat_id=target_user_id,
                            text=f"üì¢ TH√îNG B√ÅO T·ª™ ADMIN:\n\n{message}"
                        )
                        sent = True
                    except:
                        pass
                
                if sent:
                    success_count += 1
                else:
                    fail_count += 1
                    
            except Exception as e:
                fail_count += 1
                print(f"Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ƒë·∫øn {target_user_id}: {e}")

        await update.message.reply_text(
            f"‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o:\n"
            f"‚Ä¢ Th√†nh c√¥ng: {success_count} ng∆∞·ªùi\n"
            f"‚Ä¢ Th·∫•t b·∫°i: {fail_count} ng∆∞·ªùi"
        )

    async def kiemtra(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        user_count = self.admin.get_user_count()
        all_users = self.admin.get_all_users()

        await update.message.reply_text(
            f"üìä TH·ªêNG K√ä NG∆Ø·ªúI D√ôNG:\n"
            f"‚Ä¢ T·ªïng s·ªë ng∆∞·ªùi d√πng: {len(all_users)} ng∆∞·ªùi\n"
            f"‚Ä¢ Ng∆∞·ªùi d√πng th∆∞·ªùng: {user_count} ng∆∞·ªùi\n"
            f"‚Ä¢ Admin: 1 ng∆∞·ªùi\n\n"
            f"üìã Danh s√°ch ID ng∆∞·ªùi d√πng:\n{', '.join(map(str, all_users))}"
        )

    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return
            
        # Th√¥ng tin h·ªá th·ªëng
        memory_count = len(self.ai.memory)
        uptime = datetime.now() - self.last_backup
        
        # Ki·ªÉm tra dung l∆∞·ª£ng logs
        log_size = 0
        try:
            if os.path.exists("logs/activity.log"):
                log_size = os.path.getsize("logs/activity.log") / 1024  # KB
        except:
            pass
            
        status_text = (
            f"ü§ñ TR·∫†NG TH√ÅI H·ªÜ TH·ªêNG:\n"
            f"‚Ä¢ Bot Status: ‚úÖ Ho·∫°t ƒë·ªông\n"
            f"‚Ä¢ Memory Count: {memory_count} tin nh·∫Øn\n"
            f"‚Ä¢ Log Size: {log_size:.1f} KB\n"
            f"‚Ä¢ Rate Limit: {self.rate_limit_seconds}s\n"
            f"‚Ä¢ Last Backup: {self.last_backup.strftime('%d/%m/%Y %H:%M')}\n\n"
            f"‚ö° S·ª≠ d·ª•ng /memory ƒë·ªÉ qu·∫£n l√Ω b·ªô nh·ªõ"
        )
        
        await update.message.reply_text(status_text)
        self.log_activity(user_id, "STATUS_CHECK")

    async def memory(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return
            
        if context.args and context.args[0] == "clear":
            # X√≥a b·ªô nh·ªõ
            self.ai.memory = []
            await update.message.reply_text("üßπ ƒê√£ x√≥a s·∫°ch b·ªô nh·ªõ AI!")
            self.log_activity(user_id, "MEMORY_CLEAR")
        else:
            # Hi·ªÉn th·ªã th√¥ng tin b·ªô nh·ªõ
            memory_info = (
                f"üß† TH√îNG TIN B·ªò NH·ªö:\n"
                f"‚Ä¢ S·ªë tin nh·∫Øn: {len(self.ai.memory)}\n"
                f"‚Ä¢ Gi·ªõi h·∫°n: {self.ai.MAX_MEMORY * 2} tin nh·∫Øn\n"
                f"‚Ä¢ S·ª≠ d·ª•ng: {len(self.ai.memory)}/{self.ai.MAX_MEMORY * 2}\n\n"
                f"üóëÔ∏è D√πng /memory clear ƒë·ªÉ x√≥a b·ªô nh·ªõ"
            )
            await update.message.reply_text(memory_info)

    async def backup(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return
            
        await update.message.reply_text("üîÑ ƒêang t·∫°o backup...")
        
        try:
            backup_dir = f"backups/manual_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            os.makedirs(backup_dir, exist_ok=True)
            
            # Backup users.json
            if os.path.exists("users.json"):
                shutil.copy2("users.json", f"{backup_dir}/users.json")
            
            # Backup logs
            if os.path.exists("logs"):
                shutil.copytree("logs", f"{backup_dir}/logs", dirs_exist_ok=True)
                
            await update.message.reply_text(
                f"‚úÖ Backup th√†nh c√¥ng!\n"
                f"üìÅ Th∆∞ m·ª•c: {backup_dir}\n"
                f"üìÖ Th·ªùi gian: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}"
            )
            self.log_activity(user_id, "MANUAL_BACKUP", backup_dir)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå Backup th·∫•t b·∫°i: {str(e)}")
            self.log_activity(user_id, "BACKUP_FAILED", str(e))

    async def weather(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_authorized(user_id):
            await update.message.reply_text("B·∫°n ch∆∞a ƒë∆∞·ª£c c·∫•p quy·ªÅn s·ª≠ d·ª•ng bot. Li√™n h·ªá admin t·∫°i: " + ADMIN_CONTACT)
            return
            
        if not context.args:
            await update.message.reply_text("üå§Ô∏è H√£y nh·∫≠p t√™n th√†nh ph·ªë! V√≠ d·ª•: /weather Hanoi")
            return
            
        city = ' '.join(context.args)
        await update.message.reply_text("üåç ƒêang l·∫•y th√¥ng tin th·ªùi ti·∫øt...")
        
        # S·ª≠ d·ª•ng AI ƒë·ªÉ l·∫•y th√¥ng tin th·ªùi ti·∫øt
        weather_query = f"Th·ªùi ti·∫øt hi·ªán t·∫°i v√† d·ª± b√°o 3 ng√†y t·ªõi t·∫°i {city}, bao g·ªìm nhi·ªát ƒë·ªô, ƒë·ªô ·∫©m, t√¨nh tr·∫°ng th·ªùi ti·∫øt"
        response = self.ai.call_api(weather_query)
        formatted_response = self.ai.format_response(response)
        formatted_response = self.remove_asterisks(formatted_response)
        
        await update.message.reply_text(f"üå§Ô∏è **Th·ªùi ti·∫øt t·∫°i {city}:**\n\n{formatted_response}")
        self.log_activity(user_id, "WEATHER_CHECK", city)

    async def news(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_authorized(user_id):
            await update.message.reply_text("B·∫°n ch∆∞a ƒë∆∞·ª£c c·∫•p quy·ªÅn s·ª≠ d·ª•ng bot. Li√™n h·ªá admin t·∫°i: " + ADMIN_CONTACT)
            return
            
        await update.message.reply_text("üì∞ ƒêang c·∫≠p nh·∫≠t tin t·ª©c m·ªõi nh·∫•t...")
        
        # L·∫•y tin t·ª©c qua AI
        news_query = "Tin t·ª©c n√≥ng h·ªïi nh·∫•t h√¥m nay ·ªü Vi·ªát Nam v√† th·∫ø gi·ªõi, 5 tin quan tr·ªçng nh·∫•t"
        response = self.ai.call_api(news_query)
        formatted_response = self.ai.format_response(response)
        formatted_response = self.remove_asterisks(formatted_response)
        
        await update.message.reply_text(f"üì∞ **Tin t·ª©c m·ªõi nh·∫•t:**\n\n{formatted_response}")
        self.log_activity(user_id, "NEWS_CHECK")

    async def testgui(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return
            
        if not context.args:
            await update.message.reply_text("H√£y cung c·∫•p ID ng∆∞·ªùi d√πng ƒë·ªÉ test. V√≠ d·ª•: /testgui 123456789")
            return
            
        try:
            target_user_id = int(context.args[0])
            test_message = "üß™ TEST: ƒê√¢y l√† tin nh·∫Øn th·ª≠ nghi·ªám t·ª´ admin"
            
            await update.message.reply_text(f"üß™ ƒêang test g·ª≠i tin nh·∫Øn ƒë·∫øn {target_user_id}...")
            
            # Test g·ª≠i tin nh·∫Øn
            try:
                await context.bot.send_message(
                    chat_id=target_user_id,
                    text=test_message
                )
                await update.message.reply_text("‚úÖ Test th√†nh c√¥ng! Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i.")
            except Exception as e:
                await update.message.reply_text(f"‚ùå Test th·∫•t b·∫°i: {str(e)}")
                
        except ValueError:
            await update.message.reply_text("ID ng∆∞·ªùi d√πng ph·∫£i l√† s·ªë nguy√™n!")

    async def sysinfo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return
            
        try:
            import psutil
            import platform
            
            # Th√¥ng tin h·ªá th·ªëng
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            uptime_seconds = time.time() - psutil.boot_time()
            uptime_str = str(timedelta(seconds=int(uptime_seconds)))
            
            system_info = (
                f"üíª **TH√îNG TIN H·ªÜ TH·ªêNG:**\n"
                f"‚Ä¢ OS: {platform.system()} {platform.release()}\n"
                f"‚Ä¢ CPU: {cpu_percent}%\n"
                f"‚Ä¢ RAM: {memory.percent}% ({memory.used//1024//1024}MB/{memory.total//1024//1024}MB)\n"
                f"‚Ä¢ Disk: {disk.percent}% ({disk.used//1024//1024//1024}GB/{disk.total//1024//1024//1024}GB)\n"
                f"‚Ä¢ Uptime: {uptime_str}\n"
                f"‚Ä¢ Python: {platform.python_version()}\n"
                f"‚Ä¢ Bot Memory: {len(self.ai.memory)} messages\n"
                f"‚Ä¢ Active Users: {len(self.user_last_request)}"
            )
        except ImportError as e:
            import platform
            system_info = (
                f"üíª **TH√îNG TIN H·ªÜ TH·ªêNG (C∆° b·∫£n):**\n"
                f"‚Ä¢ OS: {platform.system()} {platform.release()}\n"
                f"‚Ä¢ Python: {platform.python_version()}\n"
                f"‚Ä¢ Bot Memory: {len(self.ai.memory)} messages\n"
                f"‚Ä¢ Active Users: {len(self.user_last_request)}\n"
                f"‚Ä¢ Uptime: {datetime.now() - self.last_backup}\n"
                f"‚Ä¢ Import Error: {str(e)}"
            )
        except Exception as e:
            import platform
            system_info = (
                f"üíª **TH√îNG TIN H·ªÜ TH·ªêNG (Fallback):**\n"
                f"‚Ä¢ OS: {platform.system()} {platform.release()}\n"
                f"‚Ä¢ Python: {platform.python_version()}\n"
                f"‚Ä¢ Bot Memory: {len(self.ai.memory)} messages\n"
                f"‚Ä¢ Error: {str(e)}"
            )
            
        await update.message.reply_text(system_info)
        self.log_activity(user_id, "SYSTEM_INFO")

    def remove_asterisks(self, text):
        """X√≥a t·∫•t c·∫£ k√Ω t·ª± ** kh·ªèi vƒÉn b·∫£n"""
        return text.replace("**", "")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_authorized(user_id):
            await update.message.reply_text("B·∫°n ch∆∞a ƒë∆∞·ª£c c·∫•p quy·ªÅn s·ª≠ d·ª•ng bot. Li√™n h·ªá admin t·∫°i: " + ADMIN_CONTACT)
            return
            
        # Rate limiting
        if self.is_rate_limited(user_id):
            await update.message.reply_text("‚è≥ Vui l√≤ng ch·ªù 2 gi√¢y tr∆∞·ªõc khi g·ª≠i tin nh·∫Øn ti·∫øp theo!")
            return
            
        # Auto backup ƒë·ªãnh k·ª≥
        self.auto_backup()
        
        if context.user_data.get('chatting', False):
            user_input = update.message.text
            # X√≥a k√Ω t·ª± ** t·ª´ input c·ªßa user
            user_input = self.remove_asterisks(user_input)

            # G·ª≠i tin nh·∫Øn "ƒëang ph·∫£n h·ªìi"
            typing_message = await update.message.reply_text(" Zyah KingüëΩ: ƒêang ƒë·ªçc v√† ph√¢n t√≠ch...")

            try:
                # ƒê·∫£m b·∫£o AI ƒë·ªçc v√† x·ª≠ l√Ω vƒÉn b·∫£n tr∆∞·ªõc khi ph·∫£n h·ªìi
                response = self.ai.call_api(user_input)
                formatted_response = self.ai.format_response(response)
                
                # X√≥a k√Ω t·ª± ** t·ª´ ph·∫£n h·ªìi c·ªßa AI
                formatted_response = self.remove_asterisks(formatted_response)

                # X√≥a tin nh·∫Øn "ƒëang ph·∫£n h·ªìi"
                try:
                    await typing_message.delete()
                except:
                    pass  # B·ªè qua l·ªói n·∫øu kh√¥ng x√≥a ƒë∆∞·ª£c tin nh·∫Øn

                # Chia tin nh·∫Øn n·∫øu qu√° d√†i (Telegram gi·ªõi h·∫°n 4096 k√Ω t·ª±)
                full_message = f" Zyah KingüëΩ: {formatted_response}"
                if len(full_message) > 4096:
                    # Chia th√†nh nhi·ªÅu tin nh·∫Øn
                    for i in range(0, len(full_message), 4096):
                        chunk = full_message[i:i+4096]
                        chunk = self.remove_asterisks(chunk)  # ƒê·∫£m b·∫£o x√≥a ** ·ªü m·ªçi ph·∫ßn
                        await update.message.reply_text(chunk)
                else:
                    await update.message.reply_text(full_message)
                
                self.ai.update_memory(user_input, response)

            except Exception as e:
                # N·∫øu c√≥ l·ªói, v·∫´n x√≥a tin nh·∫Øn typing v√† th√¥ng b√°o l·ªói
                try:
                    await typing_message.delete()
                except:
                    pass
                error_message = f" Zyah KingüëΩ: ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω"
                await update.message.reply_text(error_message)

    def run(self):
        max_retries = 3
        retry_count = 0
        
        while retry_count < max_retries:
            try:
                # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o instance c≈© ƒë√£ t·∫Øt ho√†n to√†n
                if retry_count > 0:
                    print(f"{Colors.INFO}[üîÑ] Th·ª≠ l·∫°i l·∫ßn {retry_count + 1}...{Colors.RESET}")
                    time.sleep(5)
                
                # Th√™m handlers
                if self.is_new_version:
                # Phi√™n b·∫£n m·ªõi
                self.app.add_handler(CommandHandler("start", self.start))
                self.app.add_handler(CommandHandler("help", self.help))
                self.app.add_handler(CommandHandler("chatai", self.chatai))
                self.app.add_handler(CommandHandler("thongtinad", self.thongtinad))
                
                self.app.add_handler(CommandHandler("mua", self.mua))
                self.app.add_handler(CommandHandler("capquyen", self.capquyen))
                self.app.add_handler(CommandHandler("xoaquyen", self.xoaquyen))
                self.app.add_handler(CommandHandler("thongbao", self.thongbao))
                self.app.add_handler(CommandHandler("kiemtra", self.kiemtra))
                
                # T√≠nh nƒÉng c≈©
                self.app.add_handler(CommandHandler("status", self.status))
                self.app.add_handler(CommandHandler("memory", self.memory))
                self.app.add_handler(CommandHandler("backup", self.backup))
                
                # T√≠nh nƒÉng m·ªõi
                self.app.add_handler(CommandHandler("weather", self.weather))
                self.app.add_handler(CommandHandler("news", self.news))
                self.app.add_handler(CommandHandler("testgui", self.testgui))
                self.app.add_handler(CommandHandler("sysinfo", self.sysinfo))
                
                self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
                
                print(f"{Colors.INFO}[üåå] Zyah KingüëΩ ƒëang kh·ªüi ƒë·ªông v·ªõi t√≠nh nƒÉng m·ªõi...{Colors.RESET}")
                self.log_activity("SYSTEM", "BOT_START")
                
                print(f"{Colors.SUCCESS}[üåå] Zyah KingüëΩ ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!{Colors.RESET}")
                self.log_activity("SYSTEM", "BOT_START")
                self.app.run_polling()
                break  # Tho√°t loop n·∫øu ch·∫°y th√†nh c√¥ng
                
            else:
                # Phi√™n b·∫£n c≈© - compatibility mode
                dp = self.app.dispatcher
                
                dp.add_handler(CommandHandler("start", self.start))
                dp.add_handler(CommandHandler("help", self.help))
                dp.add_handler(CommandHandler("chatai", self.chatai))
                dp.add_handler(CommandHandler("thongtinad", self.thongtinad))
                dp.add_handler(CommandHandler("mua", self.mua))
                dp.add_handler(CommandHandler("capquyen", self.capquyen))
                dp.add_handler(CommandHandler("xoaquyen", self.xoaquyen))
                dp.add_handler(CommandHandler("thongbao", self.thongbao))
                dp.add_handler(CommandHandler("kiemtra", self.kiemtra))
                dp.add_handler(CommandHandler("status", self.status))
                dp.add_handler(CommandHandler("memory", self.memory))
                dp.add_handler(CommandHandler("backup", self.backup))
                dp.add_handler(CommandHandler("weather", self.weather))
                dp.add_handler(CommandHandler("news", self.news))
                dp.add_handler(CommandHandler("testgui", self.testgui))
                dp.add_handler(CommandHandler("sysinfo", self.sysinfo))
                
                dp.add_handler(MessageHandler(filters.text & ~filters.command, self.handle_message))
                
                print(f"{Colors.SUCCESS}[üåå] Zyah KingüëΩ ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng (compatibility mode)!{Colors.RESET}")
                self.log_activity("SYSTEM", "BOT_START")
                
                self.app.start_polling()
                self.app.idle()
                break  # Tho√°t loop n·∫øu ch·∫°y th√†nh c√¥ng
                
            except KeyboardInterrupt:
                print(f"{Colors.INFO}[üëã] Bot ƒë√£ ƒë∆∞·ª£c d·ª´ng b·ªüi user{Colors.RESET}")
                self.cleanup()
                break
                
            except Exception as e:
                error_msg = str(e).lower()
                if 'conflict' in error_msg and 'getupdates' in error_msg:
                    print(f"{Colors.WARNING}[‚ö†Ô∏è] Ph√°t hi·ªán conflict v·ªõi instance kh√°c: {e}{Colors.RESET}")
                    retry_count += 1
                    if retry_count >= max_retries:
                        print(f"{Colors.ERROR}[üí•] ƒê√£ th·ª≠ {max_retries} l·∫ßn, bot kh√¥ng th·ªÉ kh·ªüi ƒë·ªông{Colors.RESET}")
                        self.cleanup()
                        break
                    else:
                        print(f"{Colors.INFO}[üîÑ] ƒêang c·ªë g·∫Øng d·ª´ng c√°c instance kh√°c...{Colors.RESET}")
                        self.check_running_instance()  # Th·ª≠ d·ª´ng instance kh√°c l·∫°i
                        continue
                else:
                    print(f"{Colors.ERROR}[üí•] Bot crashed: {e}{Colors.RESET}")
                    self.cleanup()
                    break
            
    def cleanup(self):
        """Cleanup khi t·∫Øt bot"""
        try:
            # X√≥a PID file
            if os.path.exists("bot.pid"):
                os.remove("bot.pid")
            print(f"{Colors.INFO}[üëã] Zyah KingüëΩ ƒë√£ t·∫Øt an to√†n{Colors.RESET}")
            self.log_activity("SYSTEM", "BOT_STOP")
        except:
            pass

# Bot class ƒë√£ s·∫µn s√†ng ƒë·ªÉ import t·ª´ bot.py